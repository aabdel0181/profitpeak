'use client';
import React from 'react';
import { Cell, ResponsiveContainer, PieChart as PieChart$1, Pie, Tooltip } from 'recharts';
import { createVarsResolver, getThemeColor, rem, factory, useProps, useMantineTheme, useStyles, useResolvedStylesApi, Box } from '@mantine/core';
import { ChartTooltip } from '../ChartTooltip/ChartTooltip.mjs';
import classes from './PieChart.module.css.mjs';

const defaultProps = {
  withTooltip: false,
  withLabelsLine: true,
  paddingAngle: 0,
  size: 160,
  strokeWidth: 1,
  startAngle: 0,
  endAngle: 360,
  tooltipDataSource: "all",
  labelsPosition: "outside",
  labelsType: "value"
};
const varsResolver = createVarsResolver(
  (theme, { strokeColor, labelColor, withLabels, size, labelsPosition }) => ({
    root: {
      "--chart-stroke-color": strokeColor ? getThemeColor(strokeColor, theme) : void 0,
      "--chart-labels-color": labelColor ? getThemeColor(labelColor, theme) : void 0,
      "--chart-size": withLabels && labelsPosition === "outside" ? rem(size + 80) : rem(size)
    }
  })
);
const getInsideLabel = (labelsType) => ({ cx, cy, midAngle, innerRadius, outerRadius, value, percent }) => {
  const RADIAN = Math.PI / 180;
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);
  return /* @__PURE__ */ React.createElement(
    "text",
    {
      x,
      y,
      textAnchor: x > cx ? "start" : "end",
      dominantBaseline: "central",
      className: classes.label
    },
    labelsType === "percent" ? `${(percent * 100).toFixed(0)}%` : value
  );
};
const PieChart = factory((_props, ref) => {
  const props = useProps("PieChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withTooltip,
    tooltipAnimationDuration,
    tooltipProps,
    pieProps,
    paddingAngle,
    withLabels,
    withLabelsLine,
    size,
    strokeWidth,
    startAngle,
    endAngle,
    tooltipDataSource,
    children,
    pieChartProps,
    labelsPosition,
    valueFormatter,
    labelsType,
    ...others
  } = props;
  const theme = useMantineTheme();
  const getStyles = useStyles({
    name: "PieChart",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const cells = data.map((item, index) => /* @__PURE__ */ React.createElement(
    Cell,
    {
      key: index,
      fill: getThemeColor(item.color, theme),
      stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
      strokeWidth
    }
  ));
  return /* @__PURE__ */ React.createElement(Box, { ref, size, ...getStyles("root"), ...others }, /* @__PURE__ */ React.createElement(ResponsiveContainer, null, /* @__PURE__ */ React.createElement(PieChart$1, { ...pieChartProps }, /* @__PURE__ */ React.createElement(
    Pie,
    {
      data,
      innerRadius: 0,
      outerRadius: size / 2,
      dataKey: "value",
      isAnimationActive: false,
      paddingAngle,
      startAngle,
      endAngle,
      label: withLabels ? labelsPosition === "inside" ? getInsideLabel(labelsType || "value") : labelsType === "percent" ? ({ percent, x, y, cx, cy }) => /* @__PURE__ */ React.createElement(
        "text",
        {
          x,
          y,
          cx,
          cy,
          textAnchor: x > cx ? "start" : "end",
          dominantBaseline: "central",
          fill: "var(--chart-labels-color, var(--mantine-color-dimmed))",
          fontFamily: "var(--mantine-font-family)",
          fontSize: 12
        },
        /* @__PURE__ */ React.createElement("tspan", { x }, `${(percent * 100).toFixed(0)}%`)
      ) : {
        fill: "var(--chart-labels-color, var(--mantine-color-dimmed))",
        fontSize: 12,
        fontFamily: "var(--mantine-font-family)"
      } : false,
      labelLine: withLabelsLine && labelsPosition === "outside" ? {
        stroke: "var(--chart-label-color, var(--mantine-color-dimmed))",
        strokeWidth: 1
      } : false,
      ...pieProps
    },
    cells
  ), withTooltip && /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      animationDuration: tooltipAnimationDuration,
      isAnimationActive: false,
      content: ({ payload }) => /* @__PURE__ */ React.createElement(
        ChartTooltip,
        {
          payload: data,
          classNames: resolvedClassNames,
          styles: resolvedStyles,
          type: "radial",
          segmentId: tooltipDataSource === "segment" ? payload?.[0]?.name : void 0,
          valueFormatter
        }
      ),
      ...tooltipProps
    }
  ), children)));
});
PieChart.displayName = "@mantine/charts/PieChart";
PieChart.classes = classes;

export { PieChart };
//# sourceMappingURL=PieChart.mjs.map
