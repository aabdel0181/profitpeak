'use client';
'use strict';

var React = require('react');
var core = require('@mantine/core');
var getSeriesLabels = require('../utils/get-series-labels/get-series-labels.cjs');
var ChartLegend_module = require('./ChartLegend.module.css.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function getFilteredChartLegendPayload(payload) {
  return payload.filter((item) => item.color !== "none");
}
const defaultProps = {};
const ChartLegend = core.factory((_props, ref) => {
  const props = core.useProps("ChartLegend", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    payload,
    onHighlight,
    legendPosition,
    mod,
    series,
    ...others
  } = props;
  const getStyles = core.useStyles({
    name: "ChartLegend",
    classes: ChartLegend_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled
  });
  if (!payload) {
    return null;
  }
  const filteredPayload = getFilteredChartLegendPayload(payload);
  const labels = getSeriesLabels.getSeriesLabels(series);
  const items = filteredPayload.map((item, index) => /* @__PURE__ */ React__default.default.createElement(
    "div",
    {
      key: index,
      ...getStyles("legendItem"),
      onMouseEnter: () => onHighlight(item.dataKey),
      onMouseLeave: () => onHighlight(null)
    },
    /* @__PURE__ */ React__default.default.createElement(
      core.ColorSwatch,
      {
        color: item.color,
        size: 12,
        ...getStyles("legendItemColor"),
        withShadow: false
      }
    ),
    /* @__PURE__ */ React__default.default.createElement("p", { ...getStyles("legendItemName") }, labels[item.dataKey] || item.dataKey)
  ));
  return /* @__PURE__ */ React__default.default.createElement(core.Box, { ref, mod: [{ position: legendPosition }, mod], ...getStyles("legend"), ...others }, items);
});
ChartLegend.displayName = "@mantine/charts/ChartLegend";

exports.ChartLegend = ChartLegend;
exports.getFilteredChartLegendPayload = getFilteredChartLegendPayload;
//# sourceMappingURL=ChartLegend.cjs.map
