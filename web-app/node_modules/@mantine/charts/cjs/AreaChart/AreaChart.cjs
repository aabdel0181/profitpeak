'use client';
'use strict';

var React = require('react');
var recharts = require('recharts');
var core = require('@mantine/core');
var ChartLegend = require('../ChartLegend/ChartLegend.cjs');
var ChartTooltip = require('../ChartTooltip/ChartTooltip.cjs');
var AreaGradient = require('./AreaGradient.cjs');
var AreaSplit = require('./AreaSplit.cjs');
var getSplitOffset = require('./get-split-offset.cjs');
var gridChart_module = require('../grid-chart.module.css.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function valueToPercent(value) {
  return `${(value * 100).toFixed(0)}%`;
}
const defaultProps = {
  withXAxis: true,
  withYAxis: true,
  withDots: true,
  withTooltip: true,
  connectNulls: true,
  strokeWidth: 2,
  tooltipAnimationDuration: 0,
  fillOpacity: 0.2,
  tickLine: "y",
  strokeDasharray: "5 5",
  curveType: "monotone",
  gridAxis: "x",
  type: "default",
  splitColors: ["green.7", "red.7"],
  orientation: "horizontal"
};
const varsResolver = core.createVarsResolver((theme, { textColor, gridColor }) => ({
  root: {
    "--chart-text-color": textColor ? core.getThemeColor(textColor, theme) : void 0,
    "--chart-grid-color": gridColor ? core.getThemeColor(gridColor, theme) : void 0
  }
}));
const AreaChart = core.factory((_props, ref) => {
  const props = core.useProps("AreaChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    series,
    withGradient,
    dataKey,
    withXAxis,
    withYAxis,
    curveType,
    gridProps,
    withDots,
    tickLine,
    strokeDasharray,
    gridAxis,
    unit,
    yAxisProps,
    xAxisProps,
    dotProps,
    activeDotProps,
    strokeWidth,
    tooltipAnimationDuration,
    type,
    legendProps,
    tooltipProps,
    withLegend,
    withTooltip,
    areaChartProps,
    fillOpacity,
    splitColors,
    splitOffset,
    connectNulls,
    onMouseLeave,
    orientation,
    referenceLines,
    dir,
    valueFormatter,
    children,
    areaProps,
    xAxisLabel,
    yAxisLabel,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const baseId = React.useId();
  const splitId = `${baseId}-split`;
  const withXTickLine = gridAxis !== "none" && (tickLine === "x" || tickLine === "xy");
  const withYTickLine = gridAxis !== "none" && (tickLine === "y" || tickLine === "xy");
  const isAnimationActive = (tooltipAnimationDuration || 0) > 0;
  const _withGradient = typeof withGradient === "boolean" ? withGradient : type === "default";
  const stacked = type === "stacked" || type === "percent";
  const [highlightedArea, setHighlightedArea] = React.useState(null);
  const shouldHighlight = highlightedArea !== null;
  const handleMouseLeave = (event) => {
    setHighlightedArea(null);
    onMouseLeave?.(event);
  };
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const getStyles = core.useStyles({
    name: "AreaChart",
    classes: gridChart_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const dotsAreas = series.map((item) => {
    const color = core.getThemeColor(item.color, theme);
    const dimmed = shouldHighlight && highlightedArea !== item.name;
    return /* @__PURE__ */ React__default.default.createElement(
      recharts.Area,
      {
        ...getStyles("area"),
        activeDot: { fill: theme.white, stroke: color, strokeWidth: 2, r: 4, ...activeDotProps },
        dot: { fill: color, fillOpacity: dimmed ? 0 : 1, strokeWidth: 2, r: 4, ...dotProps },
        key: item.name,
        name: item.name,
        type: curveType,
        dataKey: item.name,
        fill: "none",
        strokeWidth,
        stroke: "none",
        isAnimationActive: false,
        connectNulls,
        stackId: stacked ? "stack-dots" : void 0,
        ...typeof areaProps === "function" ? areaProps(item) : areaProps
      }
    );
  });
  const areas = series.map((item) => {
    const id = `${baseId}-${item.color.replace(/[^a-zA-Z0-9]/g, "")}`;
    const color = core.getThemeColor(item.color, theme);
    const dimmed = shouldHighlight && highlightedArea !== item.name;
    return /* @__PURE__ */ React__default.default.createElement(React.Fragment, { key: item.name }, /* @__PURE__ */ React__default.default.createElement("defs", null, /* @__PURE__ */ React__default.default.createElement(
      AreaGradient.AreaGradient,
      {
        color,
        withGradient: _withGradient,
        id,
        fillOpacity
      }
    )), /* @__PURE__ */ React__default.default.createElement(
      recharts.Area,
      {
        ...getStyles("area"),
        activeDot: false,
        dot: false,
        name: item.name,
        type: curveType,
        dataKey: item.name,
        fill: type === "split" ? `url(#${splitId})` : `url(#${id})`,
        strokeWidth,
        stroke: color,
        isAnimationActive: false,
        connectNulls,
        stackId: stacked ? "stack" : void 0,
        fillOpacity: dimmed ? 0 : 1,
        strokeOpacity: dimmed ? 0.5 : 1,
        strokeDasharray: item.strokeDasharray,
        ...typeof areaProps === "function" ? areaProps(item) : areaProps
      }
    ));
  });
  const referenceLinesItems = referenceLines?.map((line, index) => {
    const color = core.getThemeColor(line.color, theme);
    return /* @__PURE__ */ React__default.default.createElement(
      recharts.ReferenceLine,
      {
        key: index,
        stroke: line.color ? color : "var(--chart-grid-color)",
        strokeWidth: 1,
        ...line,
        label: {
          value: line.label,
          fill: line.color ? color : "currentColor",
          fontSize: 12,
          position: line.labelPosition ?? "insideBottomLeft"
        },
        ...getStyles("referenceLine")
      }
    );
  });
  return /* @__PURE__ */ React__default.default.createElement(
    core.Box,
    {
      ref,
      ...getStyles("root"),
      onMouseLeave: handleMouseLeave,
      dir: dir || "ltr",
      ...others
    },
    /* @__PURE__ */ React__default.default.createElement(recharts.ResponsiveContainer, { ...getStyles("container") }, /* @__PURE__ */ React__default.default.createElement(
      recharts.AreaChart,
      {
        data,
        stackOffset: type === "percent" ? "expand" : void 0,
        layout: orientation,
        margin: {
          bottom: xAxisLabel ? 30 : void 0,
          left: yAxisLabel ? 10 : void 0,
          right: yAxisLabel ? 5 : void 0
        },
        ...areaChartProps
      },
      referenceLinesItems,
      withLegend && /* @__PURE__ */ React__default.default.createElement(
        recharts.Legend,
        {
          verticalAlign: "top",
          content: (payload) => /* @__PURE__ */ React__default.default.createElement(
            ChartLegend.ChartLegend,
            {
              payload: payload.payload,
              onHighlight: setHighlightedArea,
              legendPosition: legendProps?.verticalAlign || "top",
              classNames: resolvedClassNames,
              styles: resolvedStyles,
              series
            }
          ),
          ...legendProps
        }
      ),
      /* @__PURE__ */ React__default.default.createElement(
        recharts.CartesianGrid,
        {
          strokeDasharray,
          vertical: gridAxis === "y" || gridAxis === "xy",
          horizontal: gridAxis === "x" || gridAxis === "xy",
          ...getStyles("grid"),
          ...gridProps
        }
      ),
      /* @__PURE__ */ React__default.default.createElement(
        recharts.XAxis,
        {
          hide: !withXAxis,
          ...orientation === "vertical" ? { type: "number" } : { dataKey },
          tick: { transform: "translate(0, 10)", fontSize: 12, fill: "currentColor" },
          stroke: "",
          interval: "preserveStartEnd",
          tickLine: withXTickLine ? { stroke: "currentColor" } : false,
          minTickGap: 5,
          ...getStyles("axis"),
          ...xAxisProps
        },
        xAxisLabel && /* @__PURE__ */ React__default.default.createElement(recharts.Label, { position: "insideBottom", offset: -20, fontSize: 12, ...getStyles("axisLabel") }, xAxisLabel),
        xAxisProps?.children
      ),
      /* @__PURE__ */ React__default.default.createElement(
        recharts.YAxis,
        {
          hide: !withYAxis,
          axisLine: false,
          ...orientation === "vertical" ? { dataKey, type: "category" } : { type: "number" },
          tickLine: withYTickLine ? { stroke: "currentColor" } : false,
          tick: { transform: "translate(-10, 0)", fontSize: 12, fill: "currentColor" },
          allowDecimals: true,
          unit,
          tickFormatter: type === "percent" ? valueToPercent : valueFormatter,
          ...getStyles("axis"),
          ...yAxisProps
        },
        yAxisLabel && /* @__PURE__ */ React__default.default.createElement(
          recharts.Label,
          {
            position: "insideLeft",
            angle: -90,
            textAnchor: "middle",
            fontSize: 12,
            offset: -5,
            ...getStyles("axisLabel")
          },
          yAxisLabel
        ),
        yAxisProps?.children
      ),
      withTooltip && /* @__PURE__ */ React__default.default.createElement(
        recharts.Tooltip,
        {
          animationDuration: tooltipAnimationDuration,
          isAnimationActive,
          position: { y: 0 },
          cursor: {
            stroke: "var(--chart-grid-color)",
            strokeWidth: 1,
            strokeDasharray
          },
          content: ({ label, payload }) => /* @__PURE__ */ React__default.default.createElement(
            ChartTooltip.ChartTooltip,
            {
              label,
              payload,
              unit,
              classNames: resolvedClassNames,
              styles: resolvedStyles,
              series,
              valueFormatter
            }
          ),
          ...tooltipProps
        }
      ),
      type === "split" && /* @__PURE__ */ React__default.default.createElement("defs", null, /* @__PURE__ */ React__default.default.createElement(
        AreaSplit.AreaSplit,
        {
          colors: splitColors,
          id: splitId,
          offset: splitOffset ?? getSplitOffset.getDefaultSplitOffset({ data, series }),
          fillOpacity
        }
      )),
      areas,
      withDots && dotsAreas,
      children
    ))
  );
});
AreaChart.classes = gridChart_module;
AreaChart.displayName = "@mantine/charts/AreaChart";

exports.AreaChart = AreaChart;
//# sourceMappingURL=AreaChart.cjs.map
