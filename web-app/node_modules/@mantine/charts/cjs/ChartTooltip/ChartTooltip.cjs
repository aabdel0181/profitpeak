'use client';
'use strict';

var React = require('react');
var core = require('@mantine/core');
var getSeriesLabels = require('../utils/get-series-labels/get-series-labels.cjs');
var ChartTooltip_module = require('./ChartTooltip.module.css.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function getFilteredChartTooltipPayload(payload, segmentId) {
  const duplicatesFilter = payload.filter((item) => item.fill !== "none" || !item.color);
  if (!segmentId) {
    return duplicatesFilter;
  }
  return duplicatesFilter.filter((item) => item.name === segmentId);
}
function getData(item, type) {
  if (type === "radial" || type === "scatter") {
    return item.value;
  }
  return item.payload[item.dataKey];
}
const defaultProps = {
  type: "area"
};
const ChartTooltip = core.factory((_props, ref) => {
  const props = core.useProps("ChartTooltip", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    payload,
    label,
    unit,
    type,
    segmentId,
    mod,
    series,
    valueFormatter,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const getStyles = core.useStyles({
    name: "ChartTooltip",
    classes: ChartTooltip_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled
  });
  if (!payload) {
    return null;
  }
  const filteredPayload = getFilteredChartTooltipPayload(payload, segmentId);
  const scatterLabel = type === "scatter" ? payload[0]?.payload?.name : null;
  const labels = getSeriesLabels.getSeriesLabels(series);
  const _label = label || scatterLabel;
  const items = filteredPayload.map((item) => /* @__PURE__ */ React__default.default.createElement("div", { key: item.name, "data-type": type, ...getStyles("tooltipItem") }, /* @__PURE__ */ React__default.default.createElement("div", { ...getStyles("tooltipItemBody") }, /* @__PURE__ */ React__default.default.createElement(
    core.ColorSwatch,
    {
      color: core.getThemeColor(item.color, theme),
      size: 12,
      ...getStyles("tooltipItemColor"),
      withShadow: false
    }
  ), /* @__PURE__ */ React__default.default.createElement("div", { ...getStyles("tooltipItemName") }, labels[item.name] || item.name)), /* @__PURE__ */ React__default.default.createElement("div", { ...getStyles("tooltipItemData") }, typeof valueFormatter === "function" ? valueFormatter(getData(item, type)) : getData(item, type), unit || item.unit)));
  return /* @__PURE__ */ React__default.default.createElement(core.Box, { ...getStyles("tooltip"), mod: [{ type }, mod], ref, ...others }, _label && /* @__PURE__ */ React__default.default.createElement("div", { ...getStyles("tooltipLabel") }, _label), /* @__PURE__ */ React__default.default.createElement("div", { ...getStyles("tooltipBody") }, items));
});
ChartTooltip.displayName = "@mantine/charts/ChartTooltip";

exports.ChartTooltip = ChartTooltip;
exports.getFilteredChartTooltipPayload = getFilteredChartTooltipPayload;
//# sourceMappingURL=ChartTooltip.cjs.map
