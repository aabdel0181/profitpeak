'use client';
import React from 'react';
import cx from 'clsx';
import hljs from 'highlight.js';
import { rem, createVarsResolver, factory, useProps, useStyles, UnstyledButton, Box, ScrollArea, Tooltip, ActionIcon, CopyButton } from '@mantine/core';
import { useUncontrolled } from '@mantine/hooks';
import { CopyIcon } from './CopyIcon.mjs';
import { ExpandIcon } from './ExpandIcon.mjs';
import { FileIcon } from './FileIcon.mjs';
import _classes from './CodeHighlight.module.css.mjs';
import themeClasses from './CodeHighlight.theme.module.css.mjs';

const classes = { ..._classes, root: cx(_classes.root, themeClasses.theme) };
const defaultProps = {
  withHeader: true,
  copyLabel: "Copy code",
  copiedLabel: "Copied",
  maxCollapsedHeight: rem("8rem"),
  expandCodeLabel: "Expand code",
  collapseCodeLabel: "Collapse code",
  withCopyButton: true
};
const varsResolver = createVarsResolver((_, { maxCollapsedHeight }) => ({
  root: { "--ch-max-collapsed-height": rem(maxCollapsedHeight) }
}));
const CodeHighlightTabs = factory((_props, ref) => {
  const props = useProps("CodeHighlightTabs", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    children,
    code,
    defaultActiveTab,
    activeTab,
    onTabChange,
    withHeader,
    copiedLabel,
    copyLabel,
    getFileIcon,
    maxCollapsedHeight,
    expanded,
    defaultExpanded,
    onExpandedChange,
    expandCodeLabel,
    collapseCodeLabel,
    withExpandButton,
    withCopyButton,
    mod,
    ...others
  } = props;
  const getStyles = useStyles({
    name: "CodeHighlightTabs",
    props,
    classes,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const [value, setValue] = useUncontrolled({
    defaultValue: defaultActiveTab,
    value: activeTab,
    finalValue: 0,
    onChange: onTabChange
  });
  const [_expanded, setExpanded] = useUncontrolled({
    defaultValue: defaultExpanded,
    value: expanded,
    finalValue: true,
    onChange: onExpandedChange
  });
  const nodes = Array.isArray(code) ? code : [code];
  const currentCode = nodes[value];
  const highlighted = hljs.highlight(currentCode.code.trim(), {
    language: currentCode.language || "plaintext"
  }).value;
  const files = nodes.map((node, index) => /* @__PURE__ */ React.createElement(
    UnstyledButton,
    {
      ...getStyles("file"),
      key: node.fileName,
      mod: { active: index === value },
      onClick: () => setValue(index)
    },
    /* @__PURE__ */ React.createElement(
      FileIcon,
      {
        fileIcon: node.icon,
        getFileIcon,
        fileName: node.fileName,
        ...getStyles("fileIcon")
      }
    ),
    /* @__PURE__ */ React.createElement("span", null, node.fileName)
  ));
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      ...getStyles("root"),
      mod: [{ collapsed: !_expanded }, mod],
      ref,
      ...others,
      dir: "ltr"
    },
    withHeader && /* @__PURE__ */ React.createElement("div", { ...getStyles("header") }, /* @__PURE__ */ React.createElement(ScrollArea, { type: "never", dir: "ltr", offsetScrollbars: false }, /* @__PURE__ */ React.createElement("div", { ...getStyles("files") }, files)), /* @__PURE__ */ React.createElement("div", { ...getStyles("controls") }, withExpandButton && /* @__PURE__ */ React.createElement(
      Tooltip,
      {
        label: _expanded ? collapseCodeLabel : expandCodeLabel,
        fz: "sm",
        position: "left"
      },
      /* @__PURE__ */ React.createElement(
        ActionIcon,
        {
          onClick: () => setExpanded(!_expanded),
          variant: "none",
          "aria-label": _expanded ? collapseCodeLabel : expandCodeLabel,
          ...getStyles("control")
        },
        /* @__PURE__ */ React.createElement(ExpandIcon, { expanded: _expanded })
      )
    ), withCopyButton && /* @__PURE__ */ React.createElement(CopyButton, { value: currentCode.code.trim() }, ({ copied, copy }) => /* @__PURE__ */ React.createElement(Tooltip, { label: copied ? copiedLabel : copyLabel, fz: "sm", position: "left" }, /* @__PURE__ */ React.createElement(
      ActionIcon,
      {
        onClick: copy,
        variant: "none",
        ...getStyles("control"),
        "aria-label": copied ? copiedLabel : copyLabel
      },
      /* @__PURE__ */ React.createElement(CopyIcon, { copied })
    ))))),
    /* @__PURE__ */ React.createElement(ScrollArea, { type: "auto", dir: "ltr", offsetScrollbars: false }, /* @__PURE__ */ React.createElement(Box, { ...getStyles("codeWrapper"), mod: { expanded: _expanded } }, /* @__PURE__ */ React.createElement("pre", { ...getStyles("pre") }, /* @__PURE__ */ React.createElement("code", { ...getStyles("code"), dangerouslySetInnerHTML: { __html: highlighted } })))),
    /* @__PURE__ */ React.createElement(
      UnstyledButton,
      {
        ...getStyles("showCodeButton"),
        mod: { hidden: _expanded },
        onClick: () => setExpanded(true)
      },
      expandCodeLabel
    )
  );
});
CodeHighlightTabs.displayName = "@mantine/core/CodeHighlightTabs";
CodeHighlightTabs.classes = classes;

export { CodeHighlightTabs };
//# sourceMappingURL=CodeHighlightTabs.mjs.map
